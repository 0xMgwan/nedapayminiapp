"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { FaFileInvoiceDollar, FaCirclePlus, FaFilter, FaXmark } from "react-icons/fa6";
import Header from '../../components/Header';
import { stablecoins } from '../../data/stablecoins';
import { useAccount } from "wagmi";

export default function CreateInvoicePage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    recipient: "",
    email: "",
    paymentCollection: "one-time",
    dueDate: new Date().toISOString().split("T")[0],
    currency: stablecoins[0]?.baseToken || "USDC",
    lineItems: [{ description: "", amount: "" }],
    transactionId: "",
  });
  const [transactions, setTransactions] = useState([]);
  const [filters, setFilters] = useState({
    startDate: "",
    endDate: "",
    status: "",
    amount: "",
    currency: "",
  });
  const [status, setStatus] = useState<string | null>(null);
  const [showFilters, setShowFilters] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<any | null>(null);
  const [showTransactionsModal, setShowTransactionsModal] = useState(false);
  const stablecoinOptions = [{ baseToken: 'USDC', name: 'USD Coin' }, ...stablecoins];
  const { address: merchantId } = useAccount();

  // Fetch transactions
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(`/api/transactions?merchantId=${merchantId}`);
        if (response.ok) {
          const txData = await response.json();
          setTransactions(txData);
        }
      } catch (err) {
        console.error("Error fetching transactions:", err);
      }
    };
    fetchData();
  }, [merchantId]);

  // Handle form input changes
  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  // Handle line item changes
  const handleLineItemChange = (idx: number, field: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      lineItems: prev.lineItems.map((item, i) =>
        i === idx ? { ...item, [field]: value } : item
      ),
    }));
  };

  // Add a new line item
  const addLineItem = () => {
    setFormData((prev) => ({
      ...prev,
      lineItems: [...prev.lineItems, { description: "", amount: "" }],
    }));
  };

  // Handle filter changes
  const handleFilterChange = (field: string, value: string) => {
    setFilters((prev) => ({ ...prev, [field]: value }));
  };

  // Filter transactions
  const filteredTransactions = transactions.filter((tx: any) => {
    const matchesDate =
      (!filters.startDate || new Date(tx.createdAt) >= new Date(filters.startDate)) &&
      (!filters.endDate || new Date(tx.createdAt) <= new Date(filters.endDate));
    const matchesStatus = !filters.status || tx.status === filters.status;
    const matchesAmount = !filters.amount || tx.amount.toString().includes(filters.amount);
    const matchesCurrency = !filters.currency || tx.currency === filters.currency;
    return matchesDate && matchesStatus && matchesAmount && matchesCurrency;
  });

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("loading");
    try {
      const totalAmount = formData.lineItems.reduce(
        (sum, item) => sum + (parseFloat(item.amount) || 0),
        0
      );
      const res = await fetch("/api/create-invoice", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          merchantId,
          recipient: formData.recipient,
          email: formData.email,
          paymentCollection: formData.paymentCollection,
          dueDate: formData.dueDate,
          currency: formData.currency,
          totalAmount,
          lineItems: formData.lineItems,
          transactionId: formData.transactionId || undefined,
          status: "sent",
        }),
      });
      if (!res.ok) {
        const errorData = await res.json();
        setStatus(errorData.error || "Failed to create invoice");
        return;
      }
      const data = await res.json();
      setStatus("success");
      setTimeout(() => router.push(`/invoice/${data.id}`), 1200);
    } catch (err: any) {
      setStatus(err.message || "Unknown error");
    }
  };

  // Handle draft saving
  const handleSaveDraft = async () => {
    setStatus("loading");
    try {
      const totalAmount = formData.lineItems.reduce(
        (sum, item) => sum + (parseFloat(item.amount) || 0),
        0
      );
      const res = await fetch("/api/create-invoice", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          merchantId,
          recipient: formData.recipient,
          email: formData.email,
          paymentCollection: formData.paymentCollection,
          dueDate: formData.dueDate,
          currency: formData.currency,
          totalAmount,
          lineItems: formData.lineItems,
          transactionId: formData.transactionId || undefined,
          status: "draft",
        }),
      });
      if (!res.ok) {
        const errorData = await res.json();
        setStatus(errorData.error || "Failed to save draft");
        return;
      }
      setStatus("draft");
    } catch (err: any) {
      setStatus(err.message || "Unknown error");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-800">
      <Header />
      <div className="container max-w-3xl mx-auto px-4 py-8">
        <div className="mb-6">
          <button
            onClick={() => window.history.back()}
            className="flex items-center gap-2 px-4 py-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-all duration-200 dark:text-blue-400 dark:hover:bg-gray-800"
          >
            <span className="text-xl">‚Üê</span>
            <span className="font-medium">Back to Dashboard</span>
          </button>
        </div>

        <div className="bg-white rounded-2xl shadow-xl p-8 space-y-8 dark:bg-gray-800 border border-gray-100 dark:border-gray-700">
          <div className="flex items-center gap-4 mb-8">
            <div className="p-4 bg-blue-100 rounded-xl dark:bg-gray-700">
              <FaFileInvoiceDollar className="text-3xl text-blue-600 dark:text-blue-400" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-800 dark:text-white">Create New Invoice</h1>
              <p className="text-gray-500 dark:text-gray-300">Fill in the details to send a payment request</p>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <div>
                <label className="block text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">
                  Recipient (Company or Name)
                </label>
                <input
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  value={formData.recipient}
                  onChange={(e) => handleInputChange("recipient", e.target.value)}
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">
                  Email Address
                </label>
                <input
                  type="email"
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  value={formData.email}
                  onChange={(e) => handleInputChange("email", e.target.value)}
                  required
                />
              </div>
            </div>

            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <div>
                <label className="block text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">
                  Payment Collection
                </label>
                <select
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  value={formData.paymentCollection}
                  onChange={(e) => handleInputChange("paymentCollection", e.target.value)}
                >
                  <option value="one-time">One-time Payment</option>
                  <option value="recurring">Recurring Payments</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">
                  Due Date
                </label>
                <input
                  type="date"
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  value={formData.dueDate}
                  onChange={(e) => handleInputChange("dueDate", e.target.value)}
                  required
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">
                Payment Currency
              </label>
              <select
                className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                value={formData.currency}
                onChange={(e) => handleInputChange("currency", e.target.value)}
                required
              >
                {stablecoinOptions.map((coin, idx) => (
                  <option key={`${coin.baseToken}-${idx}`} value={coin.baseToken}>
                    {coin.baseToken} - {coin.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="space-y-4">
              <label className="block text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">
                Invoice Items
              </label>
              {formData.lineItems.map((item, idx) => (
                <div key={idx} className="flex gap-4 items-center">
                  <input
                    className="flex-1 px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 outline-none transition-all dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    placeholder="Item description"
                    value={item.description}
                    onChange={(e) => handleLineItemChange(idx, "description", e.target.value)}
                    required
                  />
                  <input
                    className="w-32 px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 outline-none transition-all dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    placeholder="Amount"
                    type="number"
                    min="0.01"
                    step="0.01"
                    value={item.amount}
                    onChange={(e) => handleLineItemChange(idx, "amount", e.target.value)}
                    required
                  />
                </div>
              ))}
              <button
                type="button"
                onClick={addLineItem}
                className="flex items-center gap-2 text-blue-600 hover:text-blue-700 text-sm font-medium mt-2 dark:text-blue-400"
              >
                <FaCirclePlus className="text-lg" />
                Add Another Item
              </button>
            </div>

            <div className="space-y-4 mb-6 py-4">
              <div className="flex items-center gap-2">
                <label className="block text-sm font-semibold text-gray-700 dark:text-gray-300">
                  Click the button to check the presence of Transaction you are referring to. (optional)
                </label>
                <button
                  type="button"
                  onClick={() => setShowTransactionsModal(true)}
                  className="flex items-center gap-2 text-blue-600 hover:text-blue-700 text-sm font-medium dark:text-blue-400"
                >
                  <FaFilter className="text-lg" />
                  View Transactions
                </button>
              </div>
            </div>

            <div className="flex gap-4 mt-8">
              <button
                type="button"
                onClick={handleSaveDraft}
                className="flex-1 py-4 px-6 rounded-xl bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold transition-all dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-300"
                disabled={status === "loading"}
              >
                Save Draft
              </button>
              <button
                type="submit"
                className="flex-1 py-4 px-6 rounded-xl bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 text-white font-bold transition-all relative overflow-hidden"
                disabled={status === "loading"}
              >
                {status === "loading" ? (
                  <span className="animate-pulse">Sending...</span>
                ) : (
                  <span className="flex items-center justify-center gap-2">
                    <FaFileInvoiceDollar />
                    Send Invoice
                  </span>
                )}
              </button>
            </div>

            {status === "success" && (
              <div className="mt-4 p-4 bg-green-100 text-green-700 rounded-xl dark:bg-green-900/30 dark:text-green-400">
                Invoice sent successfully!
              </div>
            )}
            {status === "draft" && (
              <div className="mt-4 p-4 bg-blue-100 text-blue-700 rounded-xl dark:bg-blue-900/30 dark:text-blue-400">
                Invoice saved as draft!
              </div>
            )}
            {status && status !== "success" && status !== "draft" && status !== "loading" && (
              <div className="mt-4 p-4 bg-red-100 text-red-700 rounded-xl dark:bg-red-900/30 dark:text-red-400">
                {status}
              </div>
            )}
          </form>
        </div>

        {showTransactionsModal && (
          <div className="bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-4xl w-full shadow-xl">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 dark:text-white">Transactions</h2>
                <button
                  onClick={() => setShowTransactionsModal(false)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  <FaXmark className="text-lg" />
                </button>
              </div>
              <div className="mb-4">
                <button
                  type="button"
                  onClick={() => setShowFilters(!showFilters)}
                  className="flex items-center gap-2 text-blue-600 hover:text-blue-700 text-sm font-medium dark:text-blue-400"
                >
                  <FaFilter className="text-lg" />
                  {showFilters ? "Hide Filters" : "Show Filters"}
                </button>
              </div>
              {showFilters && (
                <div className="grid grid-cols-1 gap-4 md:grid-cols-2 mb-6">
                  <div>
                    <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-400">
                      Start Date
                    </label>
                    <input
                      type="date"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 outline-none dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                      value={filters.startDate}
                      onChange={(e) => handleFilterChange("startDate", e.target.value)}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-400">
                      End Date
                    </label>
                    <input
                      type="date"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 outline-none dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                      value={filters.endDate}
                      onChange={(e) => handleFilterChange("endDate", e.target.value)}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-400">
                      Status
                    </label>
                    <select
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 outline-none dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                      value={filters.status}
                      onChange={(e) => handleFilterChange("status", e.target.value)}
                    >
                      <option value="">All Statuses</option>
                      <option value="Pending">Pending</option>
                      <option value="Completed">Completed</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-400">
                      Amount
                    </label>
                    <input
                      type="number"
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 outline-none dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                      value={filters.amount}
                      onChange={(e) => handleFilterChange("amount", e.target.value)}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1 text-gray-600 dark:text-gray-400">
                      Currency
                    </label>
                    <select
                      className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 outline-none dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                      value={filters.currency}
                      onChange={(e) => handleFilterChange("currency", e.target.value)}
                    >
                      <option value="">All Currencies</option>
                      {stablecoinOptions.map((coin, idx) => (
                        <option key={`${coin.baseToken}-${idx}`} value={coin.baseToken}>
                          {coin.baseToken}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
              <div className="overflow-x-auto border border-gray-200 rounded-xl dark:border-gray-600">
                <table className="w-full text-sm text-left text-gray-700 dark:text-gray-300">
                  <thead className="text-xs uppercase bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th className="px-6 py-3">Amount</th>
                      <th className="px-6 py-3">Currency</th>
                      <th className="px-6 py-3">Wallet</th>
                      <th className="px-6 py-3">Status</th>
                      <th className="px-6 py-3">Date</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredTransactions.map((tx: any) => (
                      <tr
                        key={tx.id}
                        className="border-b dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer"
                        onClick={() => setSelectedTransaction(tx)}
                      >
                        <td className="px-6 py-4">{tx.amount}</td>
                        <td className="px-6 py-4">{tx.currency}</td>
                        <td className="px-6 py-4">{tx.wallet.slice(0, 6)}...{tx.wallet

.slice(-4)}</td>
                        <td className="px-6 py-4">{tx.status}</td>
                        <td className="px-6 py-4">{new Date(tx.createdAt).toLocaleDateString()}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <button
                onClick={() => setShowTransactionsModal(false)}
                className="mt-6 w-full py-3 px-6 rounded-xl bg-blue-600 hover:bg-blue-700 text-white font-semibold transition-all"
              >
                Close
              </button>
            </div>
          </div>
        )}

        {selectedTransaction && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-md w-full shadow-xl">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800 dark:text-white">Transaction Details</h2>
                <button
                  onClick={() => setSelectedTransaction(null)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  <FaXmark className="text-lg" />
                </button>
              </div>
              <div className="space-y-4">
                <div>
                  <span className="block text-sm font-medium text-gray-600 dark:text-gray-400">Amount</span>
                  <span className="text-lg font-semibold text-gray-800 dark:text-white">{selectedTransaction.amount} {selectedTransaction.currency}</span>
                </div>
                <div>
                  <span className="block text-sm font-medium text-gray-600 dark:text-gray-400">Currency</span>
                  <span className="text-lg font-semibold text-gray-800 dark:text-white">{selectedTransaction.currency}</span>
                </div>
                <div>
                  <span className="block text-sm font-medium text-gray-600 dark:text-gray-400">Wallet Address</span>
                  <span className="text-lg font-semibold text-gray-800 dark:text-white break-all">{selectedTransaction.wallet}</span>
                </div>
                <div>
                  <span className="block text-sm font-medium text-gray-600 dark:text-gray-400">Status</span>
                  <span className="text-lg font-semibold text-gray-800 dark:text-white">{selectedTransaction.status}</span>
                </div>
                <div>
                  <span className="block text-sm font-medium text-gray-600 dark:text-gray-400">Date</span>
                  <span className="text-lg font-semibold text-gray-800 dark:text-white">{new Date(selectedTransaction.createdAt).toLocaleDateString()}</span>
                </div>
              </div>
              <button
                onClick={() => setSelectedTransaction(null)}
                className="mt-6 w-full py-3 px-6 rounded-xl bg-blue-600 hover:bg-blue-700 text-white font-semibold transition-all"
              >
                Close
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}