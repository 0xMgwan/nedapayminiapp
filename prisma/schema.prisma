generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String?           @unique
  wallet           String?           @unique
  privyUserId      String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isActive         Boolean           @default(true)
  name             String?
  apiKeys          ApiKey[]
  merchantSettings MerchantSettings?
}

model MerchantSettings {
  id                       String   @id @default(uuid())
  userId                   String   @unique
  businessName             String?
  businessEmail            String?
  businessPhone            String?
  businessCategory         String?
  businessDescription      String?
  autoSettlement           Boolean  @default(true)
  settlementThreshold      Float    @default(1000)
  settlementCurrency       String   @default("TSHC")
  paymentExpiry            Int      @default(60)
  twoFactorEnabled         Boolean  @default(false)
  twoFactorSecret          String?
  withdrawalConfirmation   Boolean  @default(true)
  transactionNotifications Boolean  @default(true)
  settlementNotifications  Boolean  @default(true)
  securityAlerts           Boolean  @default(true)
  marketingUpdates         Boolean  @default(false)
  webhookUrl               String?
  webhookSecret            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  keyId       String    @unique
  hashedKey   String
  environment String
  name        String?
  lastUsed    DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([keyId])
  @@index([userId, environment])
}

model Transaction {
  id           String        @id @default(uuid())
  merchantId   String
  wallet       String
  amount       Float
  currency     String
  status       String
  txHash       String
  createdAt    DateTime      @default(now())
  invoiceId    String?       @unique
  invoice      Invoice?      @relation("TransactionInvoice")
  Notification Notification? @relation("TransactionNotification")
}

model PaymentLink {
  id           String        @id @default(uuid())
  merchantId   String
  url          String        @unique
  amount       Float
  currency     String
  description  String?
  status       String
  createdAt    DateTime      @default(now())
  redeemedAt   DateTime?
  invoiceId    String?       @unique
  expiresAt    DateTime      @default(now())
  signature    String        @default("")
  linkId       String?       @unique
  invoice      Invoice?      @relation("PaymentLinkInvoice")
  Notification Notification? @relation("PaymentLinkNotification")
}

model Notification {
  id                   String       @id @default(uuid())
  message              String
  recipient            String
  type                 String
  status               String
  createdAt            DateTime     @default(now())
  relatedTransactionId String?      @unique
  relatedPaymentLinkId String?      @unique
  relatedInvoiceId     String?      @unique
  relatedInvoice       Invoice?     @relation("InvoiceNotification", fields: [relatedInvoiceId], references: [id])
  relatedPaymentLink   PaymentLink? @relation("PaymentLinkNotification", fields: [relatedPaymentLinkId], references: [id])
  relatedTransaction   Transaction? @relation("TransactionNotification", fields: [relatedTransactionId], references: [id])
}

model Invoice {
  id                String            @id @default(uuid())
  merchantId        String
  recipient         String
  email             String
  paymentCollection String
  dueDate           DateTime
  currency          String
  totalAmount       Float             @default(0)
  status            String
  createdAt         DateTime          @default(now())
  sentAt            DateTime?
  paidAt            DateTime?
  canceledAt        DateTime?
  transactionId     String?           @unique
  paymentLinkId     String?           @unique
  paymentLink       PaymentLink?      @relation("PaymentLinkInvoice", fields: [paymentLinkId], references: [id])
  transaction       Transaction?      @relation("TransactionInvoice", fields: [transactionId], references: [id])
  lineItems         InvoiceLineItem[]
  Notification      Notification?     @relation("InvoiceNotification")
}

model InvoiceLineItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String
  amount      Float    @default(0)
  createdAt   DateTime @default(now())
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model OffRampTransaction {
  id           String        @unique
  createdAt    DateTime      @default(now()) 
  merchantId   String
  status       String
}
